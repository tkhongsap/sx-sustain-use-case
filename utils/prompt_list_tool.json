[{"id":"8d9f8653-7815-4774-b946-7c49280f1478","userId":"ad1ecf85-59ef-456b-88a2-14f99c4bcd52","tool":{"id":"prompt_lists","name":"prompt_lists","meta":{"description":"Returns a list of predefined prompts that are available for users to interact with. ","manifest":{}},"content":"from typing import List\nfrom pydantic import BaseModel, Field\n\nclass PromptListTool:\n    class Valves(BaseModel):\n        priority: int = Field(default=10, description=\"Priority level for tool execution.\")\n    \n    class UserValves(BaseModel):\n        max_prompts: int = Field(default=10, description=\"Maximum number of prompts to display.\")\n    \n    def __init__(self):\n        self.valves = self.Valves()\n        self.user_valves = self.UserValves()\n\n        self.prompts = [\n            \"/economic-growth-and-expansion - Economic Growth and Expansion\",\n            \"/environmental-milestones - Environmental Milestones\",\n            \"/foundation-and-early-development - Foundation and Early Development\",\n            \"/thaibev-history-article - Article on ThaiBev's History\",\n            \"/community-commitment-deep-dive - Community Commitment Deep Dive\",\n            \"/governance-and-ethical-business-practices - Governance and Ethical Business Practices\",\n            \"/innovation-and-future-goals - Innovation and Future Goals\",\n            \"/introduction-of-sustainability-initiatives - Introduction of Sustainability Initiatives\",\n        ]\n    \n    async def list_prompts(self, __user__: dict = {}, __event_emitter__=None) -> str:\n        \"\"\"\n        This tool returns a list of predefined prompts available for users.\n        It supports configurable priority and max number of prompts via valves.\n\n        :param __user__: Dictionary containing user details\n        :param __event_emitter__: Event emitter to send status or messages to the chat\n        :return: String containing the list of predefined prompt descriptions\n        \"\"\"\n        if __event_emitter__:\n            await __event_emitter__(\n                {\n                    \"type\": \"status\", \n                    \"data\": {\"description\": \"Fetching the list of prompts...\", \"done\": False}\n                }\n            )\n\n        max_prompts = self.user_valves.max_prompts\n        prompt_list = self.prompts[:max_prompts]\n\n        if __event_emitter__:\n            await __event_emitter__(\n                {\n                    \"type\": \"status\", \n                    \"data\": {\"description\": \"Prompt list fetched.\", \"done\": True}\n                }\n            )\n\n        result = \"Available prompts:\\n\" + \"\\n\".join(prompt_list)\n\n        if __event_emitter__:\n            await __event_emitter__(\n                {\n                    \"type\": \"message\", \n                    \"data\": {\"content\": result}\n                }\n            )\n\n        return result\n\n# Instantiate the tool\nprompt_list_tool = PromptListTool()"},"downloads":0,"upvotes":0,"downvotes":0,"updatedAt":1726210069,"createdAt":1726210069,"user":{"id":"ad1ecf85-59ef-456b-88a2-14f99c4bcd52","username":"tkhongsap","name":"","profileImageUrl":"https://www.gravatar.com/avatar/e1e072aae7f792a9a019c313c02a724056a9c1baa8850d0790ae55f789c897aa?d=mp","createdAt":1722402274}}]